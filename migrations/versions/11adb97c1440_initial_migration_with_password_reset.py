"""Initial migration with password reset

Revision ID: 11adb97c1440
Revises: 
Create Date: 2025-09-03 20:20:26.458658

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '11adb97c1440'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('otp_verifications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=False),
    sa.Column('otp_code', sa.String(length=10), nullable=False),
    sa.Column('attempts', sa.Integer(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('verified_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_otp_verifications_id'), 'otp_verifications', ['id'], unique=False)
    op.create_index(op.f('ix_otp_verifications_phone_number'), 'otp_verifications', ['phone_number'], unique=False)
    op.create_table('password_reset_tokens',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('is_used', sa.Boolean(), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('used_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_password_reset_tokens_id'), 'password_reset_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_password_reset_tokens_token'), 'password_reset_tokens', ['token'], unique=True)
    op.create_index(op.f('ix_password_reset_tokens_user_id'), 'password_reset_tokens', ['user_id'], unique=False)
    op.drop_index('idx_task_notifications_proz_id', table_name='task_notifications')
    op.drop_table('task_notifications')
    op.drop_index('idx_task_assignments_proz_id', table_name='task_assignments')
    op.drop_table('task_assignments')
    op.drop_index('idx_service_requests_status', table_name='service_requests')
    op.drop_table('service_requests')
    op.alter_column('proz_profiles', 'hourly_rate',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('proz_profiles', 'rating',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               type_=sa.Float(),
               existing_nullable=True,
               existing_server_default=sa.text('0.00'))
    op.drop_index('idx_proz_profiles_email', table_name='proz_profiles')
    op.drop_index('idx_proz_profiles_user_id', table_name='proz_profiles')
    op.drop_index('idx_proz_profiles_verification_status', table_name='proz_profiles')
    op.drop_constraint('proz_profiles_email_key', 'proz_profiles', type_='unique')
    op.create_index(op.f('ix_proz_profiles_email'), 'proz_profiles', ['email'], unique=True)
    op.create_index(op.f('ix_proz_profiles_id'), 'proz_profiles', ['id'], unique=False)
    op.drop_constraint('proz_profiles_user_id_fkey', 'proz_profiles', type_='foreignkey')
    op.create_foreign_key(None, 'proz_profiles', 'users', ['user_id'], ['id'])
    op.drop_constraint('proz_specialty_proz_id_specialty_id_key', 'proz_specialty', type_='unique')
    op.create_index(op.f('ix_proz_specialty_id'), 'proz_specialty', ['id'], unique=False)
    op.drop_constraint('proz_specialty_specialty_id_fkey', 'proz_specialty', type_='foreignkey')
    op.drop_constraint('proz_specialty_proz_id_fkey', 'proz_specialty', type_='foreignkey')
    op.create_foreign_key(None, 'proz_specialty', 'proz_profiles', ['proz_id'], ['id'])
    op.create_foreign_key(None, 'proz_specialty', 'specialties', ['specialty_id'], ['id'])
    op.create_index(op.f('ix_reviews_id'), 'reviews', ['id'], unique=False)
    op.drop_constraint('reviews_proz_id_fkey', 'reviews', type_='foreignkey')
    op.create_foreign_key(None, 'reviews', 'proz_profiles', ['proz_id'], ['id'])
    op.create_index(op.f('ix_specialties_id'), 'specialties', ['id'], unique=False)
    op.drop_index('idx_users_email', table_name='users')
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.drop_index(op.f('ix_specialties_id'), table_name='specialties')
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.create_foreign_key('reviews_proz_id_fkey', 'reviews', 'proz_profiles', ['proz_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_reviews_id'), table_name='reviews')
    op.drop_constraint(None, 'proz_specialty', type_='foreignkey')
    op.drop_constraint(None, 'proz_specialty', type_='foreignkey')
    op.create_foreign_key('proz_specialty_proz_id_fkey', 'proz_specialty', 'proz_profiles', ['proz_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('proz_specialty_specialty_id_fkey', 'proz_specialty', 'specialties', ['specialty_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_proz_specialty_id'), table_name='proz_specialty')
    op.create_unique_constraint('proz_specialty_proz_id_specialty_id_key', 'proz_specialty', ['proz_id', 'specialty_id'])
    op.drop_constraint(None, 'proz_profiles', type_='foreignkey')
    op.create_foreign_key('proz_profiles_user_id_fkey', 'proz_profiles', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_proz_profiles_id'), table_name='proz_profiles')
    op.drop_index(op.f('ix_proz_profiles_email'), table_name='proz_profiles')
    op.create_unique_constraint('proz_profiles_email_key', 'proz_profiles', ['email'])
    op.create_index('idx_proz_profiles_verification_status', 'proz_profiles', ['verification_status'], unique=False)
    op.create_index('idx_proz_profiles_user_id', 'proz_profiles', ['user_id'], unique=False)
    op.create_index('idx_proz_profiles_email', 'proz_profiles', ['email'], unique=False)
    op.alter_column('proz_profiles', 'rating',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=3, scale=2),
               existing_nullable=True,
               existing_server_default=sa.text('0.00'))
    op.alter_column('proz_profiles', 'hourly_rate',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
    op.create_table('service_requests',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('company_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('client_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('client_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('client_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('service_title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('service_description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('service_category', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('required_skills', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('budget_min', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('budget_max', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('expected_duration', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('deadline', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('location_preference', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('remote_work_allowed', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'assigned', 'accepted', 'in_progress', 'completed', 'cancelled', 'rejected', name='task_status'), server_default=sa.text("'pending'::task_status"), autoincrement=False, nullable=False),
    sa.Column('priority', postgresql.ENUM('low', 'medium', 'high', 'urgent', name='task_priority'), server_default=sa.text("'medium'::task_priority"), autoincrement=False, nullable=False),
    sa.Column('admin_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='service_requests_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_service_requests_status', 'service_requests', ['status'], unique=False)
    op.create_table('task_assignments',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('service_request_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('proz_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('assigned_by_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assignment_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('estimated_hours', sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
    sa.Column('proposed_rate', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'assigned', 'accepted', 'in_progress', 'completed', 'cancelled', 'rejected', name='task_status'), server_default=sa.text("'assigned'::task_status"), autoincrement=False, nullable=False),
    sa.Column('proz_response', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('proz_response_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('assigned_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assigned_by_user_id'], ['users.id'], name='task_assignments_assigned_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['proz_id'], ['proz_profiles.id'], name='task_assignments_proz_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_request_id'], ['service_requests.id'], name='task_assignments_service_request_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='task_assignments_pkey'),
    sa.UniqueConstraint('service_request_id', 'proz_id', name='task_assignments_service_request_id_proz_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_task_assignments_proz_id', 'task_assignments', ['proz_id'], unique=False)
    op.create_table('task_notifications',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('proz_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('task_assignment_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('notification_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_email_sent', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['proz_id'], ['proz_profiles.id'], name='task_notifications_proz_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_assignment_id'], ['task_assignments.id'], name='task_notifications_task_assignment_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='task_notifications_pkey')
    )
    op.create_index('idx_task_notifications_proz_id', 'task_notifications', ['proz_id'], unique=False)
    op.drop_index(op.f('ix_password_reset_tokens_user_id'), table_name='password_reset_tokens')
    op.drop_index(op.f('ix_password_reset_tokens_token'), table_name='password_reset_tokens')
    op.drop_index(op.f('ix_password_reset_tokens_id'), table_name='password_reset_tokens')
    op.drop_table('password_reset_tokens')
    op.drop_index(op.f('ix_otp_verifications_phone_number'), table_name='otp_verifications')
    op.drop_index(op.f('ix_otp_verifications_id'), table_name='otp_verifications')
    op.drop_table('otp_verifications')
    # ### end Alembic commands ###
